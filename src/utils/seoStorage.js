// SEO Storage Utility - хранение и генерация SEO данных для сайтов

/**
 * Генерирует SEO данные из контента сайта
 */
export const generateSEOFromSite = (siteData) => {
  const { hero, services, contacts } = siteData;

  // Автоматически генерируем keywords из services
  const keywords = services?.list
    ? services.list.map(s => s.title).join(', ')
    : '';

  // Генерируем description из hero
  const description = hero?.description || hero?.tagline || '';

  return {
    // Meta tags
    title: `${hero?.companyName || 'My Website'} - ${hero?.tagline || 'Professional Services'}`,
    description: description.substring(0, 160), // Google limit
    keywords: keywords.substring(0, 255),
    author: hero?.companyName || '',

    // Open Graph (соцсети)
    ogTitle: hero?.companyName || '',
    ogDescription: description.substring(0, 200),
    ogImage: '', // Will be filled from portfolio later
    ogType: 'website',

    // Schema.org
    schema: {
      '@context': 'https://schema.org',
      '@type': 'LocalBusiness',
      name: hero?.companyName || '',
      description: description,
      telephone: contacts?.phone || '',
      email: contacts?.email || '',
      address: contacts?.address || '',
      url: ''
    },

    // Дополнительно
    canonicalUrl: '',
    robots: 'index, follow',
    language: 'ru',

    // Метрики
    lastGenerated: new Date().toISOString(),
    autoGenerated: true
  };
};

/**
 * Получить SEO данные для сайта
 */
export const getSEOData = (siteId) => {
  try {
    const key = `progressit_seo_${siteId}`;
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('Error reading SEO data:', error);
    return null;
  }
};

/**
 * Сохранить SEO данные
 */
export const saveSEOData = (siteId, seoData) => {
  try {
    const key = `progressit_seo_${siteId}`;
    const dataToSave = {
      ...seoData,
      lastUpdated: new Date().toISOString(),
      autoGenerated: false // Ручное редактирование
    };
    localStorage.setItem(key, JSON.stringify(dataToSave));

    // Dispatch event для обновления компонентов
    window.dispatchEvent(new Event('seoUpdated'));

    return true;
  } catch (error) {
    console.error('Error saving SEO data:', error);
    return false;
  }
};

/**
 * Инициализировать SEO данные при создании сайта
 */
export const initializeSEO = (siteId, siteData) => {
  const existingSEO = getSEOData(siteId);

  // Если уже есть SEO данные, не перезаписываем
  if (existingSEO && !existingSEO.autoGenerated) {
    return existingSEO;
  }

  // Генерируем новые SEO данные
  const generatedSEO = generateSEOFromSite(siteData);
  saveSEOData(siteId, generatedSEO);

  return generatedSEO;
};

/**
 * Обновить SEO данные при изменении контента сайта
 */
export const updateSEOFromContent = (siteId, siteData) => {
  const existingSEO = getSEOData(siteId);

  // Если пользователь вручную редактировал SEO, не перезаписываем
  if (existingSEO && !existingSEO.autoGenerated) {
    return existingSEO;
  }

  // Регенерируем SEO
  return initializeSEO(siteId, siteData);
};

/**
 * Оценка SEO (SEO Score)
 */
export const calculateSEOScore = (seoData, siteData) => {
  let score = 0;
  const issues = [];
  const recommendations = [];

  // Title (20 points)
  if (seoData?.title) {
    if (seoData.title.length >= 30 && seoData.title.length <= 60) {
      score += 20;
    } else if (seoData.title.length > 0) {
      score += 10;
      issues.push('Title слишком ' + (seoData.title.length < 30 ? 'короткий' : 'длинный'));
      recommendations.push('Оптимальная длина title: 30-60 символов');
    }
  } else {
    issues.push('Title отсутствует');
    recommendations.push('Добавьте уникальный title для страницы');
  }

  // Description (20 points)
  if (seoData?.description) {
    if (seoData.description.length >= 120 && seoData.description.length <= 160) {
      score += 20;
    } else if (seoData.description.length > 0) {
      score += 10;
      issues.push('Description ' + (seoData.description.length < 120 ? 'слишком короткий' : 'слишком длинный'));
      recommendations.push('Оптимальная длина description: 120-160 символов');
    }
  } else {
    issues.push('Meta description отсутствует');
    recommendations.push('Добавьте описание страницы');
  }

  // Keywords (15 points)
  if (seoData?.keywords && seoData.keywords.split(',').length >= 3) {
    score += 15;
  } else {
    issues.push('Недостаточно keywords');
    recommendations.push('Добавьте 5-10 ключевых слов');
  }

  // Open Graph (15 points)
  if (seoData?.ogTitle && seoData?.ogDescription) {
    score += 15;
  } else {
    issues.push('Open Graph теги не заполнены');
    recommendations.push('Заполните OG теги для красивых ссылок в соцсетях');
  }

  // Schema.org (15 points)
  if (seoData?.schema?.name && seoData?.schema?.telephone) {
    score += 15;
  } else {
    issues.push('Schema.org данные неполные');
    recommendations.push('Заполните структурированные данные для Google');
  }

  // Contact info (15 points)
  const contacts = siteData?.contacts || {};
  if (contacts.phone && contacts.email) {
    score += 15;
  } else {
    issues.push('Контакты заполнены не полностью');
    recommendations.push('Добавьте телефон и email');
  }

  return {
    score: Math.min(100, score),
    maxScore: 100,
    grade: score >= 80 ? 'Отлично' : score >= 60 ? 'Хорошо' : score >= 40 ? 'Средне' : 'Плохо',
    issues,
    recommendations
  };
};

/**
 * Сгенерировать sitemap.xml строку
 */
export const generateSitemap = (sites) => {
  const urls = sites.map(site => ({
    loc: site.url || `/${site.id}`,
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '1.0'
  }));

  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n';

  urls.forEach(url => {
    xml += '  <url>\n';
    xml += `    <loc>${url.loc}</loc>\n`;
    xml += `    <lastmod>${url.lastmod}</lastmod>\n`;
    xml += `    <changefreq>${url.changefreq}</changefreq>\n`;
    xml += `    <priority>${url.priority}</priority>\n`;
    xml += '  </url>\n';
  });

  xml += '</urlset>';

  return xml;
};

/**
 * Сгенерировать robots.txt строку
 */
export const generateRobotsTxt = () => {
  return `User-agent: *
Allow: /

Sitemap: ${window.location.origin}/sitemap.xml`;
};
